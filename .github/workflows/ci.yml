name: CI/CD - Automatic Coordination System

on:
  push:
    branches: [ main, develop ]
    paths:
      - '04_AGENT_FRAMEWORK/mcp-integration/**'
      - '01_CODEBASES/mcp-servers/localbrain-task-registry/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '04_AGENT_FRAMEWORK/mcp-integration/**'
      - '01_CODEBASES/mcp-servers/localbrain-task-registry/**'

jobs:
  # ============================================================
  # JOB 1: Unit Tests (Fast, No Dependencies)
  # ============================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '04_AGENT_FRAMEWORK/mcp-integration/package-lock.json'

      - name: Install dependencies
        working-directory: 04_AGENT_FRAMEWORK/mcp-integration
        run: npm ci

      - name: Run unit tests
        working-directory: 04_AGENT_FRAMEWORK/mcp-integration
        run: npm run test:unit

      - name: Generate coverage report
        working-directory: 04_AGENT_FRAMEWORK/mcp-integration
        run: npm run test:coverage

      - name: Check coverage thresholds
        working-directory: 04_AGENT_FRAMEWORK/mcp-integration
        run: |
          COVERAGE=$(npx vitest --coverage --reporter=json | jq -r '.coverage.total.lines.pct')
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 90% threshold"
            exit 1
          fi
          echo "✅ Coverage $COVERAGE% meets threshold"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./04_AGENT_FRAMEWORK/mcp-integration/coverage/coverage-final.json
          flags: unit-tests
          name: unit-tests-coverage

  # ============================================================
  # JOB 2: Integration Tests (Requires MCP Server)
  # ============================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      # SQLite database (file-based, no service needed)
      # MCP server will be started manually in steps

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install MCP server dependencies
        working-directory: 01_CODEBASES/mcp-servers/localbrain-task-registry
        run: npm ci

      - name: Start MCP server
        working-directory: 01_CODEBASES/mcp-servers/localbrain-task-registry
        run: |
          npm run dev &
          MCP_PID=$!
          echo "MCP_SERVER_PID=$MCP_PID" >> $GITHUB_ENV

          # Wait for server to be ready (max 30 seconds)
          echo "⏳ Waiting for MCP server to start..."
          for i in {1..30}; do
            if npx localbrain-task-registry list_tasks > /dev/null 2>&1; then
              echo "✅ MCP server is ready"
              break
            fi
            sleep 1
          done

      - name: Install integration test dependencies
        working-directory: 04_AGENT_FRAMEWORK/mcp-integration
        run: npm ci

      - name: Run integration tests
        working-directory: 04_AGENT_FRAMEWORK/mcp-integration
        run: npm run test:integration
        env:
          CLAUDE_MODEL_ID: claude-sonnet-4-5-20250929

      - name: Stop MCP server
        if: always()
        run: |
          if [ -n "$MCP_SERVER_PID" ]; then
            kill $MCP_SERVER_PID || true
          fi

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: 04_AGENT_FRAMEWORK/mcp-integration/test-results/

  # ============================================================
  # JOB 3: Performance Benchmarks
  # ============================================================
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install MCP server dependencies
        working-directory: 01_CODEBASES/mcp-servers/localbrain-task-registry
        run: npm ci

      - name: Start MCP server
        working-directory: 01_CODEBASES/mcp-servers/localbrain-task-registry
        run: |
          npm run dev &
          MCP_PID=$!
          echo "MCP_SERVER_PID=$MCP_PID" >> $GITHUB_ENV

          # Wait for server to be ready
          echo "⏳ Waiting for MCP server to start..."
          for i in {1..30}; do
            if npx localbrain-task-registry list_tasks > /dev/null 2>&1; then
              echo "✅ MCP server is ready"
              break
            fi
            sleep 1
          done

      - name: Install benchmark dependencies
        working-directory: 04_AGENT_FRAMEWORK/mcp-integration
        run: npm ci

      - name: Run performance benchmarks
        working-directory: 04_AGENT_FRAMEWORK/mcp-integration
        run: npm run test:performance
        env:
          CLAUDE_MODEL_ID: claude-sonnet-4-5-20250929

      - name: Validate performance thresholds
        working-directory: 04_AGENT_FRAMEWORK/mcp-integration
        run: |
          # Check if any performance test failed
          if grep -q "FAIL" test-results/performance.log; then
            echo "❌ Performance benchmarks failed to meet thresholds"
            cat test-results/performance.log
            exit 1
          fi
          echo "✅ All performance benchmarks passed"

      - name: Stop MCP server
        if: always()
        run: |
          if [ -n "$MCP_SERVER_PID" ]; then
            kill $MCP_SERVER_PID || true
          fi

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-benchmark-results
          path: 04_AGENT_FRAMEWORK/mcp-integration/test-results/

      - name: Comment PR with performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('04_AGENT_FRAMEWORK/mcp-integration/test-results/performance.log', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ⚡ Performance Benchmark Results\n\n\`\`\`\n${results}\n\`\`\``
            });

  # ============================================================
  # JOB 4: End-to-End Tests (Full System)
  # ============================================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install all dependencies
        run: |
          cd 01_CODEBASES/mcp-servers/localbrain-task-registry && npm ci
          cd ../../../04_AGENT_FRAMEWORK/mcp-integration && npm ci

      - name: Start MCP server
        working-directory: 01_CODEBASES/mcp-servers/localbrain-task-registry
        run: |
          npm run dev &
          MCP_PID=$!
          echo "MCP_SERVER_PID=$MCP_PID" >> $GITHUB_ENV
          sleep 5

      - name: Run E2E test - Agent B session
        working-directory: 04_AGENT_FRAMEWORK/mcp-integration
        run: |
          # Simulate Agent B opening session
          CLAUDE_MODEL_ID=claude-sonnet-4-5-20250929 node -e "
            const { AutomaticAgent } = require('./dist/AutomaticAgent.js');

            (async () => {
              console.log('🧪 E2E Test: Agent B Session Start');

              // Step 1: Initialize agent
              const agent = await AutomaticAgent.initialize();
              const identity = agent.getIdentity();
              console.log('✅ Agent initialized:', identity.agentId);

              // Step 2: Request task
              const action = await agent.processPrompt('start working');
              if (action) {
                console.log('✅ Task claimed:', action.task?.id);
              } else {
                console.log('✅ No tasks available (expected)');
              }

              // Step 3: Check status
              const status = await agent.processPrompt('what\\'s my status?');
              console.log('✅ Status checked:', status?.action);

              console.log('🎉 E2E Test Passed');
            })();
          "

      - name: Stop MCP server
        if: always()
        run: |
          if [ -n "$MCP_SERVER_PID" ]; then
            kill $MCP_SERVER_PID || true
          fi

  # ============================================================
  # JOB 5: Build Validation
  # ============================================================
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        working-directory: 04_AGENT_FRAMEWORK/mcp-integration
        run: npm ci

      - name: Build TypeScript
        working-directory: 04_AGENT_FRAMEWORK/mcp-integration
        run: npm run build

      - name: Check for TypeScript errors
        working-directory: 04_AGENT_FRAMEWORK/mcp-integration
        run: npx tsc --noEmit

      - name: Lint code
        working-directory: 04_AGENT_FRAMEWORK/mcp-integration
        run: npm run lint

  # ============================================================
  # JOB 6: Status Check (All Jobs Must Pass)
  # ============================================================
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-benchmarks, e2e-tests, build-validation]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.performance-benchmarks.result }}" != "success" ] || \
             [ "${{ needs.e2e-tests.result }}" != "success" ] || \
             [ "${{ needs.build-validation.result }}" != "success" ]; then
            echo "❌ CI pipeline failed - one or more jobs failed"
            exit 1
          fi

          echo "✅ All CI jobs passed successfully!"
          echo ""
          echo "┌─────────────────────────────────────────────┐"
          echo "│ 🎉 AUTOMATIC COORDINATION SYSTEM VALIDATED  │"
          echo "├─────────────────────────────────────────────┤"
          echo "│ ✅ Unit Tests Passed                        │"
          echo "│ ✅ Integration Tests Passed                 │"
          echo "│ ✅ Performance Benchmarks Met               │"
          echo "│ ✅ E2E Tests Passed                         │"
          echo "│ ✅ Build Validation Passed                  │"
          echo "│                                             │"
          echo "│ 🚀 READY FOR PRODUCTION DEPLOYMENT!         │"
          echo "└─────────────────────────────────────────────┘"

      - name: Post success comment to PR
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ✅ CI Pipeline Passed\n\n🎉 All validation checks passed successfully!\n\n- ✅ Unit Tests\n- ✅ Integration Tests\n- ✅ Performance Benchmarks\n- ✅ E2E Tests\n- ✅ Build Validation\n\n**Status**: Ready for production deployment!`
            });
