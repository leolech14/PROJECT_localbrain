{
  "file_info": {
    "path": "/Users/lech/PROJECTS_all/LocalBrain/mr-fix-my-project-please.py",
    "size_kb": 791.576171875,
    "lines": 14430
  },
  "functions": [
    {
      "name": "create_separator_line",
      "line": 127,
      "indentation": 0,
      "code_snippet": "def create_separator_line(char=\"\u2550\", width=MAX_WIDTH):"
    },
    {
      "name": "create_box_header",
      "line": 149,
      "indentation": 0,
      "code_snippet": "def create_box_header(title, icon=\"\", width=MAX_WIDTH):"
    },
    {
      "name": "create_closed_box",
      "line": 181,
      "indentation": 0,
      "code_snippet": "def create_closed_box(lines_content, width=MAX_WIDTH):"
    },
    {
      "name": "create_section_box",
      "line": 222,
      "indentation": 0,
      "code_snippet": "def create_section_box(title, content_lines, width=MAX_WIDTH):"
    },
    {
      "name": "create_zone_marker",
      "line": 263,
      "indentation": 0,
      "code_snippet": "def create_zone_marker(zone_num, zone_name, icon=\"\ud83d\udce6\", width=MAX_WIDTH):"
    },
    {
      "name": "to_oklch_string",
      "line": 328,
      "indentation": 4,
      "code_snippet": "def to_oklch_string(self) -> str:"
    },
    {
      "name": "__init__",
      "line": 339,
      "indentation": 4,
      "code_snippet": "def __init__(self, default_schema: ColorSchema = ColorSchema.TEMPERATURE):"
    },
    {
      "name": "_init_color_schemas",
      "line": 345,
      "indentation": 4,
      "code_snippet": "def _init_color_schemas(self):"
    },
    {
      "name": "_init_component_colors",
      "line": 389,
      "indentation": 4,
      "code_snippet": "def _init_component_colors(self):"
    },
    {
      "name": "get_color",
      "line": 406,
      "indentation": 4,
      "code_snippet": "def get_color(self, color_key: str, schema: Optional[ColorSchema] = None) -> ColorToken:"
    },
    {
      "name": "set_schema",
      "line": 418,
      "indentation": 4,
      "code_snippet": "def set_schema(self, schema: ColorSchema):"
    },
    {
      "name": "generate_css_variables",
      "line": 422,
      "indentation": 4,
      "code_snippet": "def generate_css_variables(self, schema: Optional[ColorSchema] = None) -> str:"
    },
    {
      "name": "__post_init__",
      "line": 458,
      "indentation": 4,
      "code_snippet": "def __post_init__(self):"
    },
    {
      "name": "__init__",
      "line": 472,
      "indentation": 4,
      "code_snippet": "def __init__(self):"
    },
    {
      "name": "_initialize_enhanced_components",
      "line": 476,
      "indentation": 4,
      "code_snippet": "def _initialize_enhanced_components(self):"
    },
    {
      "name": "render_component",
      "line": 519,
      "indentation": 4,
      "code_snippet": "def render_component(self, component_id: str, config: ComponentConfig = None) -> str:"
    },
    {
      "name": "_get_calendar_template",
      "line": 546,
      "indentation": 4,
      "code_snippet": "def _get_calendar_template(self) -> str:"
    },
    {
      "name": "_get_calendar_styles",
      "line": 575,
      "indentation": 4,
      "code_snippet": "def _get_calendar_styles(self) -> str:"
    },
    {
      "name": "_get_calendar_javascript",
      "line": 645,
      "indentation": 4,
      "code_snippet": "def _get_calendar_javascript(self) -> str:"
    },
    {
      "name": "_get_timeline_template",
      "line": 721,
      "indentation": 4,
      "code_snippet": "def _get_timeline_template(self) -> str:"
    },
    {
      "name": "_get_timeline_styles",
      "line": 736,
      "indentation": 4,
      "code_snippet": "def _get_timeline_styles(self) -> str:"
    },
    {
      "name": "_get_timeline_javascript",
      "line": 791,
      "indentation": 4,
      "code_snippet": "def _get_timeline_javascript(self) -> str:"
    },
    {
      "name": "_get_language_toggle_template",
      "line": 871,
      "indentation": 4,
      "code_snippet": "def _get_language_toggle_template(self) -> str:"
    },
    {
      "name": "_get_language_toggle_styles",
      "line": 881,
      "indentation": 4,
      "code_snippet": "def _get_language_toggle_styles(self) -> str:"
    },
    {
      "name": "_get_language_toggle_javascript",
      "line": 924,
      "indentation": 4,
      "code_snippet": "def _get_language_toggle_javascript(self) -> str:"
    },
    {
      "name": "_get_theme_toggle_template",
      "line": 970,
      "indentation": 4,
      "code_snippet": "def _get_theme_toggle_template(self) -> str:"
    },
    {
      "name": "_get_theme_toggle_styles",
      "line": 980,
      "indentation": 4,
      "code_snippet": "def _get_theme_toggle_styles(self) -> str:"
    },
    {
      "name": "_get_theme_toggle_javascript",
      "line": 1012,
      "indentation": 4,
      "code_snippet": "def _get_theme_toggle_javascript(self) -> str:"
    },
    {
      "name": "_get_settings_panel_template",
      "line": 1068,
      "indentation": 4,
      "code_snippet": "def _get_settings_panel_template(self) -> str:"
    },
    {
      "name": "_get_settings_panel_styles",
      "line": 1095,
      "indentation": 4,
      "code_snippet": "def _get_settings_panel_styles(self) -> str:"
    },
    {
      "name": "_get_settings_panel_javascript",
      "line": 1160,
      "indentation": 4,
      "code_snippet": "def _get_settings_panel_javascript(self) -> str:"
    },
    {
      "name": "__init__",
      "line": 1226,
      "indentation": 4,
      "code_snippet": "def __init__(self):"
    },
    {
      "name": "generate_enhanced_html",
      "line": 1230,
      "indentation": 4,
      "code_snippet": "def generate_enhanced_html(self, results: dict, project_path: str) -> str:"
    },
    {
      "name": "_generate_enhanced_global_styles",
      "line": 1298,
      "indentation": 4,
      "code_snippet": "def _generate_enhanced_global_styles(self) -> str:"
    },
    {
      "name": "_generate_enhanced_javascript",
      "line": 1338,
      "indentation": 4,
      "code_snippet": "def _generate_enhanced_javascript(self) -> str:"
    },
    {
      "name": "_generate_enhanced_header",
      "line": 1351,
      "indentation": 4,
      "code_snippet": "def _generate_enhanced_header(self) -> str:"
    },
    {
      "name": "_generate_original_content",
      "line": 1405,
      "indentation": 4,
      "code_snippet": "def _generate_original_content(self, results: dict) -> str:"
    },
    {
      "name": "_generate_enhanced_footer",
      "line": 1465,
      "indentation": 4,
      "code_snippet": "def _generate_enhanced_footer(self) -> str:"
    },
    {
      "name": "__init__",
      "line": 1515,
      "indentation": 4,
      "code_snippet": "def __init__(self, script_path=\"mr-fix-my-project-please.py\"):"
    },
    {
      "name": "analyze_and_heal",
      "line": 1535,
      "indentation": 4,
      "code_snippet": "def analyze_and_heal(self):"
    },
    {
      "name": "_detect_zones",
      "line": 1610,
      "indentation": 4,
      "code_snippet": "def _detect_zones(self):"
    },
    {
      "name": "_enforce_width_limits",
      "line": 1644,
      "indentation": 4,
      "code_snippet": "def _enforce_width_limits(self):"
    },
    {
      "name": "_update_zone_metadata",
      "line": 1956,
      "indentation": 4,
      "code_snippet": "def _update_zone_metadata(self):"
    },
    {
      "name": "_validate_ascii_art",
      "line": 1977,
      "indentation": 4,
      "code_snippet": "def _validate_ascii_art(self):"
    },
    {
      "name": "get_zone_report",
      "line": 1984,
      "indentation": 4,
      "code_snippet": "def get_zone_report(self):"
    },
    {
      "name": "generate_ascii_section_map",
      "line": 1999,
      "indentation": 4,
      "code_snippet": "def generate_ascii_section_map(self):"
    },
    {
      "name": "get_display_width",
      "line": 2051,
      "indentation": 8,
      "code_snippet": "def get_display_width(text):"
    },
    {
      "name": "pad_to_width",
      "line": 2075,
      "indentation": 8,
      "code_snippet": "def pad_to_width(text, target_width):"
    },
    {
      "name": "_update_ascii_section_map",
      "line": 2127,
      "indentation": 4,
      "code_snippet": "def _update_ascii_section_map(self):"
    },
    {
      "name": "__init__",
      "line": 2200,
      "indentation": 4,
      "code_snippet": "def __init__(self, project_path: str = \".\"):"
    },
    {
      "name": "get_translations",
      "line": 2324,
      "indentation": 4,
      "code_snippet": "def get_translations(self):"
    },
    {
      "name": "t",
      "line": 2588,
      "indentation": 4,
      "code_snippet": "def t(self, key: str, lang: str = None) -> str:"
    },
    {
      "name": "start_memory_monitor",
      "line": 2596,
      "indentation": 4,
      "code_snippet": "def start_memory_monitor(self):"
    },
    {
      "name": "monitor",
      "line": 2614,
      "indentation": 8,
      "code_snippet": "def monitor():"
    },
    {
      "name": "check_time_limit",
      "line": 2636,
      "indentation": 4,
      "code_snippet": "def check_time_limit(self) -> bool:"
    },
    {
      "name": "determine_analysis_strategy",
      "line": 2662,
      "indentation": 4,
      "code_snippet": "def determine_analysis_strategy(self, surface_scan: dict) -> dict:"
    },
    {
      "name": "execute_plan_b_fallback",
      "line": 2804,
      "indentation": 4,
      "code_snippet": "def execute_plan_b_fallback(self, trigger: str, context: dict) -> dict:"
    },
    {
      "name": "perform_maximum_extraction_analysis",
      "line": 2901,
      "indentation": 4,
      "code_snippet": "def perform_maximum_extraction_analysis(self):"
    },
    {
      "name": "discover_emergent_purpose_layer1",
      "line": 2981,
      "indentation": 4,
      "code_snippet": "def discover_emergent_purpose_layer1(self) -> dict:"
    },
    {
      "name": "generate_dependency_analysis",
      "line": 3137,
      "indentation": 4,
      "code_snippet": "def generate_dependency_analysis(self) -> dict:"
    },
    {
      "name": "analyze_and_heal",
      "line": 3232,
      "indentation": 4,
      "code_snippet": "def analyze_and_heal(self) -> dict:"
    },
    {
      "name": "generate_html_report",
      "line": 3315,
      "indentation": 4,
      "code_snippet": "def generate_html_report(self, results: dict) -> str:"
    },
    {
      "name": "_generate_dependency_map_html",
      "line": 3320,
      "indentation": 4,
      "code_snippet": "def _generate_dependency_map_html(self) -> str:"
    },
    {
      "name": "_generate_mermaid_diagram",
      "line": 3623,
      "indentation": 4,
      "code_snippet": "def _generate_mermaid_diagram(self, dependency_analysis: dict) -> str:"
    },
    {
      "name": "_build_enhanced_dependency_data",
      "line": 3650,
      "indentation": 4,
      "code_snippet": "def _build_enhanced_dependency_data(self, dependency_analysis: dict) -> dict:"
    },
    {
      "name": "_generate_ripple_html",
      "line": 3732,
      "indentation": 4,
      "code_snippet": "def _generate_ripple_html(self, ripple_analysis: dict) -> str:"
    },
    {
      "name": "_generate_strategic_recommendations",
      "line": 3810,
      "indentation": 4,
      "code_snippet": "def _generate_strategic_recommendations(self, dependency_analysis: dict) -> str:"
    },
    {
      "name": "_generate_entity_details_html",
      "line": 3910,
      "indentation": 4,
      "code_snippet": "def _generate_entity_details_html(self, file_analysis: dict) -> str:"
    },
    {
      "name": "_scan_source_files",
      "line": 4077,
      "indentation": 4,
      "code_snippet": "def _scan_source_files(self, project_path: Path) -> list:"
    },
    {
      "name": "_analyze_file_dependencies",
      "line": 4092,
      "indentation": 4,
      "code_snippet": "def _analyze_file_dependencies(self, file_path: Path) -> dict:"
    },
    {
      "name": "_analyze_python_dependencies",
      "line": 4110,
      "indentation": 4,
      "code_snippet": "def _analyze_python_dependencies(self, content: str, file_path: Path) -> dict:"
    },
    {
      "name": "_analyze_javascript_dependencies",
      "line": 4141,
      "indentation": 4,
      "code_snippet": "def _analyze_javascript_dependencies(self, content: str, file_path: Path) -> dict:"
    },
    {
      "name": "_analyze_generic_dependencies",
      "line": 4177,
      "indentation": 4,
      "code_snippet": "def _analyze_generic_dependencies(self, content: str, file_path: Path) -> dict:"
    },
    {
      "name": "_build_dependency_graph",
      "line": 4198,
      "indentation": 4,
      "code_snippet": "def _build_dependency_graph(self, file_dependencies: dict, all_exports: dict) -> dict:"
    },
    {
      "name": "_calculate_ripple_effects",
      "line": 4218,
      "indentation": 4,
      "code_snippet": "def _calculate_ripple_effects(self, dependency_graph: dict, all_exports: dict) -> dict:"
    },
    {
      "name": "_identify_critical_files",
      "line": 4258,
      "indentation": 4,
      "code_snippet": "def _identify_critical_files(self, dependency_graph: dict, ripple_analysis: dict) -> list:"
    },
    {
      "name": "_assess_real_risk",
      "line": 4281,
      "indentation": 4,
      "code_snippet": "def _assess_real_risk(self, source_files: list, dependency_graph: dict) -> dict:"
    },
    {
      "name": "_classify_dependency",
      "line": 4311,
      "indentation": 4,
      "code_snippet": "def _classify_dependency(self, dep_name: str) -> str:"
    },
    {
      "name": "_assess_strength",
      "line": 4324,
      "indentation": 4,
      "code_snippet": "def _assess_strength(self, dep_name: str) -> str:"
    },
    {
      "name": "_find_indirect_dependencies",
      "line": 4333,
      "indentation": 4,
      "code_snippet": "def _find_indirect_dependencies(self, dependency_graph: dict, direct_imports: set) -> list:"
    },
    {
      "name": "_count_total_lines",
      "line": 4347,
      "indentation": 4,
      "code_snippet": "def _count_total_lines(self, source_files: list) -> int:"
    },
    {
      "name": "_sniper_entity_scan",
      "line": 4358,
      "indentation": 4,
      "code_snippet": "def _sniper_entity_scan(self, file_path: Path) -> dict:"
    },
    {
      "name": "_calculate_function_complexity",
      "line": 4522,
      "indentation": 4,
      "code_snippet": "def _calculate_function_complexity(self, content: str, function_name: str) -> str:"
    },
    {
      "name": "_extract_class_methods",
      "line": 4570,
      "indentation": 4,
      "code_snippet": "def _extract_class_methods(self, content: str, class_name: str) -> list:"
    },
    {
      "name": "_extract_component_props",
      "line": 4601,
      "indentation": 4,
      "code_snippet": "def _extract_component_props(self, content: str, component_name: str) -> list:"
    },
    {
      "name": "run_analysis",
      "line": 4635,
      "indentation": 4,
      "code_snippet": "def run_analysis(self):"
    },
    {
      "name": "get_grade_from_score",
      "line": 4700,
      "indentation": 4,
      "code_snippet": "def get_grade_from_score(self, score: float) -> str:"
    },
    {
      "name": "get_status_from_score",
      "line": 4713,
      "indentation": 4,
      "code_snippet": "def get_status_from_score(self, score: float) -> str:"
    },
    {
      "name": "__init__",
      "line": 4766,
      "indentation": 4,
      "code_snippet": "def __init__(self, project_path: str):"
    },
    {
      "name": "generate_smart_diagrams",
      "line": 4779,
      "indentation": 4,
      "code_snippet": "def generate_smart_diagrams(self, enhanced_data: dict) -> list:"
    },
    {
      "name": "_create_main_core_diagram",
      "line": 4805,
      "indentation": 4,
      "code_snippet": "def _create_main_core_diagram(self, nodes: list, relationships: list, file_types: dict) -> dict:"
    },
    {
      "name": "_create_critical_paths_diagram",
      "line": 4824,
      "indentation": 4,
      "code_snippet": "def _create_critical_paths_diagram(self, nodes: list, relationships: list, file_types: dict) -> dict"
    },
    {
      "name": "_create_component_clusters_diagram",
      "line": 4843,
      "indentation": 4,
      "code_snippet": "def _create_component_clusters_diagram(self, nodes: list, relationships: list, file_types: dict) -> "
    },
    {
      "name": "_create_service_layers_diagram",
      "line": 4868,
      "indentation": 4,
      "code_snippet": "def _create_service_layers_diagram(self, nodes: list, relationships: list, file_types: dict) -> dict"
    },
    {
      "name": "_create_risk_analysis_diagram",
      "line": 4887,
      "indentation": 4,
      "code_snippet": "def _create_risk_analysis_diagram(self, nodes: list, relationships: list, file_types: dict) -> dict:"
    },
    {
      "name": "_get_core_nodes",
      "line": 4906,
      "indentation": 4,
      "code_snippet": "def _get_core_nodes(self, nodes: list, relationships: list, limit: int = 30) -> list:"
    },
    {
      "name": "_find_hub_nodes",
      "line": 4919,
      "indentation": 4,
      "code_snippet": "def _find_hub_nodes(self, nodes: list, relationships: list, limit: int = 20) -> list:"
    },
    {
      "name": "_group_by_file_type",
      "line": 4931,
      "indentation": 4,
      "code_snippet": "def _group_by_file_type(self, nodes: list, file_types: dict) -> dict:"
    },
    {
      "name": "_categorize_by_layer",
      "line": 4943,
      "indentation": 4,
      "code_snippet": "def _categorize_by_layer(self, nodes: list, file_types: dict) -> list:"
    },
    {
      "name": "_identify_high_risk_nodes",
      "line": 4966,
      "indentation": 4,
      "code_snippet": "def _identify_high_risk_nodes(self, nodes: list, relationships: list, file_types: dict) -> list:"
    },
    {
      "name": "_filter_relationships",
      "line": 4985,
      "indentation": 4,
      "code_snippet": "def _filter_relationships(self, relationships: list, nodes: list) -> list:"
    },
    {
      "name": "_calculate_risk",
      "line": 4997,
      "indentation": 4,
      "code_snippet": "def _calculate_risk(self, nodes: list, relationships: list) -> str:"
    },
    {
      "name": "_generate_mermaid_syntax",
      "line": 5010,
      "indentation": 4,
      "code_snippet": "def _generate_mermaid_syntax(self, nodes: list, relationships: list, file_types: dict) -> str:"
    },
    {
      "name": "_generate_fallback_diagram",
      "line": 5050,
      "indentation": 4,
      "code_snippet": "def _generate_fallback_diagram(self) -> str:"
    },
    {
      "name": "perform_optimized_surface_scan",
      "line": 5062,
      "indentation": 4,
      "code_snippet": "def perform_optimized_surface_scan(self) -> dict:"
    },
    {
      "name": "scan_project_optimized",
      "line": 5255,
      "indentation": 4,
      "code_snippet": "def scan_project_optimized(self, project_path: Path) -> dict:"
    },
    {
      "name": "aggregate_project_stats",
      "line": 5456,
      "indentation": 4,
      "code_snippet": "def aggregate_project_stats("
    },
    {
      "name": "execute_adaptive_analysis",
      "line": 5517,
      "indentation": 4,
      "code_snippet": "def execute_adaptive_analysis(self, strategy: dict) -> dict:"
    },
    {
      "name": "perform_deep_analysis",
      "line": 5566,
      "indentation": 4,
      "code_snippet": "def perform_deep_analysis(self, sampling_rate: float) -> dict:"
    },
    {
      "name": "perform_standard_analysis",
      "line": 5619,
      "indentation": 4,
      "code_snippet": "def perform_standard_analysis(self, sampling_rate: float) -> dict:"
    },
    {
      "name": "perform_ecosystem_analysis",
      "line": 5649,
      "indentation": 4,
      "code_snippet": "def perform_ecosystem_analysis("
    },
    {
      "name": "perform_plan_b_analysis",
      "line": 5716,
      "indentation": 4,
      "code_snippet": "def perform_plan_b_analysis(self, sampling_rate: float, strategy_name: str) -> dict:"
    },
    {
      "name": "perform_emergency_analysis",
      "line": 5790,
      "indentation": 4,
      "code_snippet": "def perform_emergency_analysis(self) -> dict:"
    },
    {
      "name": "execute_emergency_fallback",
      "line": 5814,
      "indentation": 4,
      "code_snippet": "def execute_emergency_fallback(self, error: Exception):"
    },
    {
      "name": "detect_patterns",
      "line": 5840,
      "indentation": 4,
      "code_snippet": "def detect_patterns(self, content: str, file_extension: str) -> list:"
    },
    {
      "name": "analyze_code_quality",
      "line": 5895,
      "indentation": 4,
      "code_snippet": "def analyze_code_quality(self, content: str, file_extension: str) -> dict:"
    },
    {
      "name": "calculate_project_health",
      "line": 5928,
      "indentation": 4,
      "code_snippet": "def calculate_project_health(self, project_info: dict) -> float:"
    },
    {
      "name": "assess_project_complexity",
      "line": 5975,
      "indentation": 4,
      "code_snippet": "def assess_project_complexity(self, project_info: dict) -> dict:"
    },
    {
      "name": "assess_project_risks",
      "line": 6023,
      "indentation": 4,
      "code_snippet": "def assess_project_risks(self, project_info: dict) -> dict:"
    },
    {
      "name": "classify_project_type",
      "line": 6066,
      "indentation": 4,
      "code_snippet": "def classify_project_type(self, project_info: dict) -> str:"
    },
    {
      "name": "calculate_shannon_diversity",
      "line": 6097,
      "indentation": 4,
      "code_snippet": "def calculate_shannon_diversity(self, type_counts: Counter) -> float:"
    },
    {
      "name": "assess_ecosystem_coordination",
      "line": 6114,
      "indentation": 4,
      "code_snippet": "def assess_ecosystem_coordination("
    },
    {
      "name": "detect_ecosystem_patterns",
      "line": 6191,
      "indentation": 4,
      "code_snippet": "def detect_ecosystem_patterns("
    },
    {
      "name": "generate_maximum_insights",
      "line": 6238,
      "indentation": 4,
      "code_snippet": "def generate_maximum_insights("
    },
    {
      "name": "assess_overall_complexity",
      "line": 6358,
      "indentation": 4,
      "code_snippet": "def assess_overall_complexity(self, summary: dict) -> str:"
    },
    {
      "name": "assess_overall_maturity",
      "line": 6393,
      "indentation": 4,
      "code_snippet": "def assess_overall_maturity(self, analysis_results: dict) -> str:"
    },
    {
      "name": "assess_overall_risk",
      "line": 6412,
      "indentation": 4,
      "code_snippet": "def assess_overall_risk(self, risk_factors: dict) -> str:"
    },
    {
      "name": "identify_critical_risks",
      "line": 6450,
      "indentation": 4,
      "code_snippet": "def identify_critical_risks(self, risk_factors: dict) -> list:"
    },
    {
      "name": "generate_risk_mitigation_strategies",
      "line": 6481,
      "indentation": 4,
      "code_snippet": "def generate_risk_mitigation_strategies(self, risk_factors: dict) -> list:"
    },
    {
      "name": "generate_strategic_recommendations",
      "line": 6512,
      "indentation": 4,
      "code_snippet": "def generate_strategic_recommendations("
    },
    {
      "name": "generate_immediate_actions",
      "line": 6561,
      "indentation": 4,
      "code_snippet": "def generate_immediate_actions("
    },
    {
      "name": "estimate_fix_effort",
      "line": 6590,
      "indentation": 4,
      "code_snippet": "def estimate_fix_effort(self, risk: dict) -> str:"
    },
    {
      "name": "identify_optimization_opportunities",
      "line": 6606,
      "indentation": 4,
      "code_snippet": "def identify_optimization_opportunities("
    },
    {
      "name": "assess_overall_quality",
      "line": 6646,
      "indentation": 4,
      "code_snippet": "def assess_overall_quality("
    },
    {
      "name": "assess_analysis_effectiveness",
      "line": 6692,
      "indentation": 4,
      "code_snippet": "def assess_analysis_effectiveness(self, analysis_results: dict) -> dict:"
    },
    {
      "name": "assess_data_extraction_quality",
      "line": 6726,
      "indentation": 4,
      "code_snippet": "def assess_data_extraction_quality(self, analysis_results: dict) -> dict:"
    },
    {
      "name": "explain_confidence_level",
      "line": 6765,
      "indentation": 4,
      "code_snippet": "def explain_confidence_level(self, strategy: dict, analysis_results: dict) -> str:"
    },
    {
      "name": "identify_analysis_limitations",
      "line": 6789,
      "indentation": 4,
      "code_snippet": "def identify_analysis_limitations("
    },
    {
      "name": "calculate_sampling_efficiency",
      "line": 6813,
      "indentation": 4,
      "code_snippet": "def calculate_sampling_efficiency(self, analysis_results: dict) -> dict:"
    },
    {
      "name": "calculate_performance_metrics",
      "line": 6844,
      "indentation": 4,
      "code_snippet": "def calculate_performance_metrics(self, total_time: float) -> dict:"
    },
    {
      "name": "calculate_critical_score",
      "line": 6875,
      "indentation": 4,
      "code_snippet": "def calculate_critical_score(self) -> float:"
    },
    {
      "name": "generate_critical_insights",
      "line": 6927,
      "indentation": 4,
      "code_snippet": "def generate_critical_insights(self) -> dict:"
    },
    {
      "name": "generate_html_report",
      "line": 7041,
      "indentation": 4,
      "code_snippet": "def generate_html_report(self, results: dict) -> str:"
    },
    {
      "name": "_generate_fallback_html",
      "line": 7083,
      "indentation": 4,
      "code_snippet": "def _generate_fallback_html(self, results: dict) -> str:"
    },
    {
      "name": "_generate_temporal_html",
      "line": 8145,
      "indentation": 4,
      "code_snippet": "def _generate_temporal_html(self) -> str:"
    },
    {
      "name": "_generate_work_sessions_html",
      "line": 8166,
      "indentation": 4,
      "code_snippet": "def _generate_work_sessions_html(self) -> str:"
    },
    {
      "name": "_generate_tech_stack_html",
      "line": 8232,
      "indentation": 4,
      "code_snippet": "def _generate_tech_stack_html(self) -> str:"
    },
    {
      "name": "_generate_duplicates_html",
      "line": 8266,
      "indentation": 4,
      "code_snippet": "def _generate_duplicates_html(self) -> str:"
    },
    {
      "name": "_generate_directory_purposes_html",
      "line": 8304,
      "indentation": 4,
      "code_snippet": "def _generate_directory_purposes_html(self) -> str:"
    },
    {
      "name": "_generate_consolidation_html",
      "line": 8344,
      "indentation": 4,
      "code_snippet": "def _generate_consolidation_html(self) -> str:"
    },
    {
      "name": "_generate_empty_dirs_html",
      "line": 8366,
      "indentation": 4,
      "code_snippet": "def _generate_empty_dirs_html(self) -> str:"
    },
    {
      "name": "_generate_naming_html",
      "line": 8383,
      "indentation": 4,
      "code_snippet": "def _generate_naming_html(self) -> str:"
    },
    {
      "name": "_parse_markdown_to_html",
      "line": 8409,
      "indentation": 4,
      "code_snippet": "def _parse_markdown_to_html(self, markdown_text: str) -> str:"
    },
    {
      "name": "_generate_llm_insights_html",
      "line": 8582,
      "indentation": 4,
      "code_snippet": "def _generate_llm_insights_html(self) -> str:"
    },
    {
      "name": "_generate_color_system_dashboard_html",
      "line": 8657,
      "indentation": 4,
      "code_snippet": "def _generate_color_system_dashboard_html(self) -> str:"
    },
    {
      "name": "_generate_color_system_dashboard_html_compact",
      "line": 9154,
      "indentation": 4,
      "code_snippet": "def _generate_color_system_dashboard_html_compact(self) -> str:"
    },
    {
      "name": "_generate_file_types_html",
      "line": 9242,
      "indentation": 4,
      "code_snippet": "def _generate_file_types_html(self) -> str:"
    },
    {
      "name": "_generate_strong_points_html",
      "line": 9266,
      "indentation": 4,
      "code_snippet": "def _generate_strong_points_html(self) -> str:"
    },
    {
      "name": "_generate_weak_points_html",
      "line": 9303,
      "indentation": 4,
      "code_snippet": "def _generate_weak_points_html(self) -> str:"
    },
    {
      "name": "_generate_robustness_html",
      "line": 9332,
      "indentation": 4,
      "code_snippet": "def _generate_robustness_html(self) -> str:"
    },
    {
      "name": "_generate_action_plan_html",
      "line": 9386,
      "indentation": 4,
      "code_snippet": "def _generate_action_plan_html(self) -> str:"
    },
    {
      "name": "_generate_action_plan_html_optimized",
      "line": 9904,
      "indentation": 4,
      "code_snippet": "def _generate_action_plan_html_optimized(self) -> str:"
    },
    {
      "name": "_generate_duplicates_html_optimized",
      "line": 10261,
      "indentation": 4,
      "code_snippet": "def _generate_duplicates_html_optimized(self) -> str:"
    },
    {
      "name": "_generate_directory_purposes_html_optimized",
      "line": 10321,
      "indentation": 4,
      "code_snippet": "def _generate_directory_purposes_html_optimized(self) -> str:"
    },
    {
      "name": "_generate_tech_stack_html_optimized",
      "line": 10377,
      "indentation": 4,
      "code_snippet": "def _generate_tech_stack_html_optimized(self) -> str:"
    },
    {
      "name": "_generate_empty_dirs_html_optimized",
      "line": 10418,
      "indentation": 4,
      "code_snippet": "def _generate_empty_dirs_html_optimized(self) -> str:"
    },
    {
      "name": "_generate_temporal_html_optimized",
      "line": 10448,
      "indentation": 4,
      "code_snippet": "def _generate_temporal_html_optimized(self) -> str:"
    },
    {
      "name": "_generate_consolidation_html_optimized",
      "line": 12006,
      "indentation": 4,
      "code_snippet": "def _generate_consolidation_html_optimized(self) -> str:"
    },
    {
      "name": "_generate_performance_html",
      "line": 12042,
      "indentation": 4,
      "code_snippet": "def _generate_performance_html(self) -> str:"
    },
    {
      "name": "_get_clean_purpose",
      "line": 12074,
      "indentation": 4,
      "code_snippet": "def _get_clean_purpose(self) -> str:"
    },
    {
      "name": "_translate_file_type",
      "line": 12101,
      "indentation": 4,
      "code_snippet": "def _translate_file_type(self, file_type: str) -> str:"
    },
    {
      "name": "_get_relatable_time_label",
      "line": 12113,
      "indentation": 4,
      "code_snippet": "def _get_relatable_time_label(self, timestamp_str: str) -> str:"
    },
    {
      "name": "_generate_work_sessions_html_optimized",
      "line": 12201,
      "indentation": 4,
      "code_snippet": "def _generate_work_sessions_html_optimized(self) -> str:"
    },
    {
      "name": "_generate_ascii_tree",
      "line": 12243,
      "indentation": 4,
      "code_snippet": "def _generate_ascii_tree(self, max_depth=3) -> str:"
    },
    {
      "name": "add_directory",
      "line": 12247,
      "indentation": 12,
      "code_snippet": "def add_directory(path, prefix=\"\", depth=0):"
    },
    {
      "name": "_get_score_class",
      "line": 12282,
      "indentation": 4,
      "code_snippet": "def _get_score_class(self, score: float) -> str:"
    },
    {
      "name": "generate_llm_analysis",
      "line": 12293,
      "indentation": 4,
      "code_snippet": "def generate_llm_analysis(self) -> dict:"
    },
    {
      "name": "generate_llm_insights_html",
      "line": 12418,
      "indentation": 4,
      "code_snippet": "def generate_llm_insights_html(self, insights: dict) -> str:"
    },
    {
      "name": "generate_recommendations_html",
      "line": 12472,
      "indentation": 4,
      "code_snippet": "def generate_recommendations_html(self, recommendations: list) -> str:"
    },
    {
      "name": "generate_actions_html",
      "line": 12491,
      "indentation": 4,
      "code_snippet": "def generate_actions_html(self, actions: list) -> str:"
    },
    {
      "name": "generate_critical_issues_html",
      "line": 12514,
      "indentation": 4,
      "code_snippet": "def generate_critical_issues_html(self, critical_risks: list) -> str:"
    },
    {
      "name": "get_risk_percentage",
      "line": 12537,
      "indentation": 4,
      "code_snippet": "def get_risk_percentage(self, risk_level: str) -> int:"
    },
    {
      "name": "generate_fallback_html",
      "line": 12544,
      "indentation": 4,
      "code_snippet": "def generate_fallback_html(self, results: dict) -> str:"
    },
    {
      "name": "run_analysis",
      "line": 12575,
      "indentation": 4,
      "code_snippet": "def run_analysis(self):"
    },
    {
      "name": "get_grade_from_score",
      "line": 12663,
      "indentation": 4,
      "code_snippet": "def get_grade_from_score(self, score: float) -> str:"
    },
    {
      "name": "get_status_from_score",
      "line": 12687,
      "indentation": 4,
      "code_snippet": "def get_status_from_score(self, score: float) -> str:"
    },
    {
      "name": "generate_project_types_html",
      "line": 12700,
      "indentation": 4,
      "code_snippet": "def generate_project_types_html(self, project_types: dict) -> str:"
    },
    {
      "name": "generate_size_distribution_html",
      "line": 12716,
      "indentation": 4,
      "code_snippet": "def generate_size_distribution_html(self, size_distribution: dict) -> str:"
    },
    {
      "name": "generate_diversity_metrics_html",
      "line": 12732,
      "indentation": 4,
      "code_snippet": "def generate_diversity_metrics_html(self, diversity_metrics: dict) -> str:"
    },
    {
      "name": "generate_coordination_html",
      "line": 12756,
      "indentation": 4,
      "code_snippet": "def generate_coordination_html(self, coordination: dict) -> str:"
    },
    {
      "name": "generate_patterns_html",
      "line": 12788,
      "indentation": 4,
      "code_snippet": "def generate_patterns_html(self, patterns: list) -> str:"
    },
    {
      "name": "generate_llm_insights_compact_html",
      "line": 12807,
      "indentation": 4,
      "code_snippet": "def generate_llm_insights_compact_html(self, insights: dict) -> str:"
    },
    {
      "name": "run_advanced_analysis",
      "line": 12842,
      "indentation": 4,
      "code_snippet": "def run_advanced_analysis(self):"
    },
    {
      "name": "analyze_temporal_evolution",
      "line": 12870,
      "indentation": 4,
      "code_snippet": "def analyze_temporal_evolution(self) -> dict:"
    },
    {
      "name": "detect_duplicates",
      "line": 13014,
      "indentation": 4,
      "code_snippet": "def detect_duplicates(self) -> dict:"
    },
    {
      "name": "analyze_naming_patterns",
      "line": 13125,
      "indentation": 4,
      "code_snippet": "def analyze_naming_patterns(self) -> dict:"
    },
    {
      "name": "classify_directory_purposes",
      "line": 13194,
      "indentation": 4,
      "code_snippet": "def classify_directory_purposes(self) -> dict:"
    },
    {
      "name": "discover_emergent_purpose_layer3",
      "line": 13292,
      "indentation": 4,
      "code_snippet": "def discover_emergent_purpose_layer3(self) -> dict:"
    },
    {
      "name": "find_consolidation_opportunities",
      "line": 13503,
      "indentation": 4,
      "code_snippet": "def find_consolidation_opportunities(self) -> list:"
    },
    {
      "name": "detect_empty_directories",
      "line": 13569,
      "indentation": 4,
      "code_snippet": "def detect_empty_directories(self) -> list:"
    },
    {
      "name": "detect_technology_stack",
      "line": 13594,
      "indentation": 4,
      "code_snippet": "def detect_technology_stack(self) -> dict:"
    },
    {
      "name": "enrich_action_plan_with_llm",
      "line": 13663,
      "indentation": 4,
      "code_snippet": "def enrich_action_plan_with_llm("
    },
    {
      "name": "analyze_with_gpt5",
      "line": 13766,
      "indentation": 4,
      "code_snippet": "def analyze_with_gpt5(self) -> dict:"
    },
    {
      "name": "generate_agent_remediation_instructions",
      "line": 14056,
      "indentation": 4,
      "code_snippet": "def generate_agent_remediation_instructions("
    },
    {
      "name": "generate_architecture_map",
      "line": 14276,
      "indentation": 0,
      "code_snippet": "def generate_architecture_map(script_path: str = __file__) -> str:"
    },
    {
      "name": "main",
      "line": 14373,
      "indentation": 0,
      "code_snippet": "def main():"
    }
  ],
  "complexity": {
    "create_separator_line": {
      "complexity": 4,
      "lines": 21
    },
    "create_box_header": {
      "complexity": 6,
      "lines": 31
    },
    "create_closed_box": {
      "complexity": 7,
      "lines": 40
    },
    "create_section_box": {
      "complexity": 5,
      "lines": 40
    },
    "create_zone_marker": {
      "complexity": 8,
      "lines": 45
    },
    "to_oklch_string": {
      "complexity": 1,
      "lines": 2
    },
    "__init__": {
      "complexity": 1,
      "lines": 12
    },
    "_init_color_schemas": {
      "complexity": 1,
      "lines": 43
    },
    "_init_component_colors": {
      "complexity": 1,
      "lines": 16
    },
    "get_color": {
      "complexity": 4,
      "lines": 11
    },
    "set_schema": {
      "complexity": 1,
      "lines": 3
    },
    "generate_css_variables": {
      "complexity": 6,
      "lines": 21
    },
    "__post_init__": {
      "complexity": 3,
      "lines": 5
    },
    "_initialize_enhanced_components": {
      "complexity": 1,
      "lines": 42
    },
    "render_component": {
      "complexity": 5,
      "lines": 26
    },
    "_get_calendar_template": {
      "complexity": 1,
      "lines": 28
    },
    "_get_calendar_styles": {
      "complexity": 1,
      "lines": 69
    },
    "_get_calendar_javascript": {
      "complexity": 1,
      "lines": 2
    },
    "_get_timeline_template": {
      "complexity": 1,
      "lines": 14
    },
    "_get_timeline_styles": {
      "complexity": 1,
      "lines": 54
    },
    "_get_timeline_javascript": {
      "complexity": 1,
      "lines": 2
    },
    "_get_language_toggle_template": {
      "complexity": 1,
      "lines": 9
    },
    "_get_language_toggle_styles": {
      "complexity": 1,
      "lines": 42
    },
    "_get_language_toggle_javascript": {
      "complexity": 1,
      "lines": 2
    },
    "_get_theme_toggle_template": {
      "complexity": 1,
      "lines": 9
    },
    "_get_theme_toggle_styles": {
      "complexity": 1,
      "lines": 31
    },
    "_get_theme_toggle_javascript": {
      "complexity": 1,
      "lines": 2
    },
    "_get_settings_panel_template": {
      "complexity": 1,
      "lines": 26
    },
    "_get_settings_panel_styles": {
      "complexity": 1,
      "lines": 64
    },
    "_get_settings_panel_javascript": {
      "complexity": 1,
      "lines": 2
    },
    "generate_enhanced_html": {
      "complexity": 1,
      "lines": 67
    },
    "_generate_enhanced_global_styles": {
      "complexity": 1,
      "lines": 39
    },
    "_generate_enhanced_javascript": {
      "complexity": 2,
      "lines": 12
    },
    "_generate_enhanced_header": {
      "complexity": 1,
      "lines": 53
    },
    "_generate_original_content": {
      "complexity": 11,
      "lines": 59
    },
    "_generate_enhanced_footer": {
      "complexity": 1,
      "lines": 16
    },
    "analyze_and_heal": {
      "complexity": 9,
      "lines": 82
    },
    "_detect_zones": {
      "complexity": 15,
      "lines": 33
    },
    "_enforce_width_limits": {
      "complexity": 77,
      "lines": 200
    },
    "_update_zone_metadata": {
      "complexity": 6,
      "lines": 20
    },
    "_validate_ascii_art": {
      "complexity": 1,
      "lines": 6
    },
    "get_zone_report": {
      "complexity": 2,
      "lines": 14
    },
    "generate_ascii_section_map": {
      "complexity": 56,
      "lines": 127
    },
    "get_display_width": {
      "complexity": 7,
      "lines": 23
    },
    "pad_to_width": {
      "complexity": 17,
      "lines": 51
    },
    "_update_ascii_section_map": {
      "complexity": 10,
      "lines": 29
    },
    "get_translations": {
      "complexity": 3,
      "lines": 200
    },
    "t": {
      "complexity": 2,
      "lines": 7
    },
    "start_memory_monitor": {
      "complexity": 7,
      "lines": 39
    },
    "monitor": {
      "complexity": 4,
      "lines": 21
    },
    "check_time_limit": {
      "complexity": 5,
      "lines": 25
    },
    "determine_analysis_strategy": {
      "complexity": 18,
      "lines": 141
    },
    "execute_plan_b_fallback": {
      "complexity": 2,
      "lines": 96
    },
    "perform_maximum_extraction_analysis": {
      "complexity": 16,
      "lines": 79
    },
    "discover_emergent_purpose_layer1": {
      "complexity": 18,
      "lines": 155
    },
    "generate_dependency_analysis": {
      "complexity": 9,
      "lines": 94
    },
    "generate_html_report": {
      "complexity": 7,
      "lines": 41
    },
    "_generate_dependency_map_html": {
      "complexity": 10,
      "lines": 200
    },
    "_generate_mermaid_diagram": {
      "complexity": 4,
      "lines": 26
    },
    "_build_enhanced_dependency_data": {
      "complexity": 25,
      "lines": 81
    },
    "_generate_ripple_html": {
      "complexity": 10,
      "lines": 77
    },
    "_generate_strategic_recommendations": {
      "complexity": 12,
      "lines": 99
    },
    "_generate_entity_details_html": {
      "complexity": 25,
      "lines": 166
    },
    "_scan_source_files": {
      "complexity": 8,
      "lines": 14
    },
    "_analyze_file_dependencies": {
      "complexity": 7,
      "lines": 17
    },
    "_analyze_python_dependencies": {
      "complexity": 14,
      "lines": 30
    },
    "_analyze_javascript_dependencies": {
      "complexity": 5,
      "lines": 35
    },
    "_analyze_generic_dependencies": {
      "complexity": 4,
      "lines": 20
    },
    "_build_dependency_graph": {
      "complexity": 7,
      "lines": 19
    },
    "_calculate_ripple_effects": {
      "complexity": 12,
      "lines": 39
    },
    "_identify_critical_files": {
      "complexity": 5,
      "lines": 22
    },
    "_assess_real_risk": {
      "complexity": 9,
      "lines": 29
    },
    "_classify_dependency": {
      "complexity": 10,
      "lines": 12
    },
    "_assess_strength": {
      "complexity": 4,
      "lines": 8
    },
    "_find_indirect_dependencies": {
      "complexity": 4,
      "lines": 13
    },
    "_count_total_lines": {
      "complexity": 2,
      "lines": 10
    },
    "_sniper_entity_scan": {
      "complexity": 35,
      "lines": 163
    },
    "_calculate_function_complexity": {
      "complexity": 23,
      "lines": 47
    },
    "_extract_class_methods": {
      "complexity": 8,
      "lines": 30
    },
    "_extract_component_props": {
      "complexity": 7,
      "lines": 33
    },
    "run_analysis": {
      "complexity": 15,
      "lines": 87
    },
    "get_grade_from_score": {
      "complexity": 9,
      "lines": 23
    },
    "get_status_from_score": {
      "complexity": 6,
      "lines": 12
    },
    "generate_smart_diagrams": {
      "complexity": 2,
      "lines": 25
    },
    "_create_main_core_diagram": {
      "complexity": 2,
      "lines": 18
    },
    "_create_critical_paths_diagram": {
      "complexity": 3,
      "lines": 18
    },
    "_create_component_clusters_diagram": {
      "complexity": 3,
      "lines": 24
    },
    "_create_service_layers_diagram": {
      "complexity": 2,
      "lines": 18
    },
    "_create_risk_analysis_diagram": {
      "complexity": 2,
      "lines": 18
    },
    "_get_core_nodes": {
      "complexity": 4,
      "lines": 12
    },
    "_find_hub_nodes": {
      "complexity": 2,
      "lines": 11
    },
    "_group_by_file_type": {
      "complexity": 3,
      "lines": 11
    },
    "_categorize_by_layer": {
      "complexity": 6,
      "lines": 22
    },
    "_identify_high_risk_nodes": {
      "complexity": 5,
      "lines": 18
    },
    "_filter_relationships": {
      "complexity": 4,
      "lines": 11
    },
    "_calculate_risk": {
      "complexity": 6,
      "lines": 12
    },
    "_generate_mermaid_syntax": {
      "complexity": 6,
      "lines": 39
    },
    "_generate_fallback_diagram": {
      "complexity": 1,
      "lines": 11
    },
    "perform_optimized_surface_scan": {
      "complexity": 34,
      "lines": 192
    },
    "scan_project_optimized": {
      "complexity": 37,
      "lines": 200
    },
    "aggregate_project_stats": {
      "complexity": 24,
      "lines": 60
    },
    "execute_adaptive_analysis": {
      "complexity": 12,
      "lines": 48
    },
    "perform_deep_analysis": {
      "complexity": 13,
      "lines": 52
    },
    "perform_standard_analysis": {
      "complexity": 6,
      "lines": 29
    },
    "perform_ecosystem_analysis": {
      "complexity": 11,
      "lines": 66
    },
    "perform_plan_b_analysis": {
      "complexity": 10,
      "lines": 73
    },
    "perform_emergency_analysis": {
      "complexity": 2,
      "lines": 23
    },
    "execute_emergency_fallback": {
      "complexity": 2,
      "lines": 25
    },
    "detect_patterns": {
      "complexity": 24,
      "lines": 54
    },
    "analyze_code_quality": {
      "complexity": 12,
      "lines": 32
    },
    "calculate_project_health": {
      "complexity": 16,
      "lines": 46
    },
    "assess_project_complexity": {
      "complexity": 16,
      "lines": 47
    },
    "assess_project_risks": {
      "complexity": 10,
      "lines": 42
    },
    "classify_project_type": {
      "complexity": 14,
      "lines": 30
    },
    "calculate_shannon_diversity": {
      "complexity": 6,
      "lines": 16
    },
    "assess_ecosystem_coordination": {
      "complexity": 19,
      "lines": 76
    },
    "detect_ecosystem_patterns": {
      "complexity": 18,
      "lines": 46
    },
    "generate_maximum_insights": {
      "complexity": 11,
      "lines": 119
    },
    "assess_overall_complexity": {
      "complexity": 21,
      "lines": 34
    },
    "assess_overall_maturity": {
      "complexity": 7,
      "lines": 18
    },
    "assess_overall_risk": {
      "complexity": 18,
      "lines": 37
    },
    "identify_critical_risks": {
      "complexity": 4,
      "lines": 30
    },
    "generate_risk_mitigation_strategies": {
      "complexity": 9,
      "lines": 30
    },
    "generate_strategic_recommendations": {
      "complexity": 12,
      "lines": 48
    },
    "generate_immediate_actions": {
      "complexity": 4,
      "lines": 28
    },
    "estimate_fix_effort": {
      "complexity": 9,
      "lines": 15
    },
    "identify_optimization_opportunities": {
      "complexity": 5,
      "lines": 39
    },
    "assess_overall_quality": {
      "complexity": 8,
      "lines": 45
    },
    "assess_analysis_effectiveness": {
      "complexity": 8,
      "lines": 33
    },
    "assess_data_extraction_quality": {
      "complexity": 11,
      "lines": 38
    },
    "explain_confidence_level": {
      "complexity": 9,
      "lines": 23
    },
    "identify_analysis_limitations": {
      "complexity": 7,
      "lines": 23
    },
    "calculate_sampling_efficiency": {
      "complexity": 3,
      "lines": 30
    },
    "calculate_performance_metrics": {
      "complexity": 9,
      "lines": 30
    },
    "calculate_critical_score": {
      "complexity": 17,
      "lines": 51
    },
    "generate_critical_insights": {
      "complexity": 4,
      "lines": 113
    },
    "_generate_fallback_html": {
      "complexity": 17,
      "lines": 200
    },
    "_generate_temporal_html": {
      "complexity": 4,
      "lines": 20
    },
    "_generate_work_sessions_html": {
      "complexity": 15,
      "lines": 65
    },
    "_generate_tech_stack_html": {
      "complexity": 6,
      "lines": 33
    },
    "_generate_duplicates_html": {
      "complexity": 5,
      "lines": 37
    },
    "_generate_directory_purposes_html": {
      "complexity": 6,
      "lines": 39
    },
    "_generate_consolidation_html": {
      "complexity": 4,
      "lines": 21
    },
    "_generate_empty_dirs_html": {
      "complexity": 3,
      "lines": 16
    },
    "_generate_naming_html": {
      "complexity": 3,
      "lines": 25
    },
    "_parse_markdown_to_html": {
      "complexity": 43,
      "lines": 172
    },
    "_generate_llm_insights_html": {
      "complexity": 15,
      "lines": 74
    },
    "_generate_color_system_dashboard_html": {
      "complexity": 5,
      "lines": 200
    },
    "_generate_color_system_dashboard_html_compact": {
      "complexity": 4,
      "lines": 87
    },
    "_generate_file_types_html": {
      "complexity": 5,
      "lines": 23
    },
    "_generate_strong_points_html": {
      "complexity": 7,
      "lines": 36
    },
    "_generate_weak_points_html": {
      "complexity": 7,
      "lines": 28
    },
    "_generate_robustness_html": {
      "complexity": 13,
      "lines": 53
    },
    "_generate_action_plan_html": {
      "complexity": 29,
      "lines": 200
    },
    "_generate_action_plan_html_optimized": {
      "complexity": 33,
      "lines": 200
    },
    "_generate_duplicates_html_optimized": {
      "complexity": 7,
      "lines": 59
    },
    "_generate_directory_purposes_html_optimized": {
      "complexity": 5,
      "lines": 55
    },
    "_generate_tech_stack_html_optimized": {
      "complexity": 4,
      "lines": 40
    },
    "_generate_empty_dirs_html_optimized": {
      "complexity": 6,
      "lines": 29
    },
    "_generate_temporal_html_optimized": {
      "complexity": 42,
      "lines": 200
    },
    "_generate_consolidation_html_optimized": {
      "complexity": 4,
      "lines": 35
    },
    "_generate_performance_html": {
      "complexity": 2,
      "lines": 31
    },
    "_get_clean_purpose": {
      "complexity": 18,
      "lines": 26
    },
    "_translate_file_type": {
      "complexity": 1,
      "lines": 11
    },
    "_get_relatable_time_label": {
      "complexity": 27,
      "lines": 87
    },
    "_generate_work_sessions_html_optimized": {
      "complexity": 4,
      "lines": 41
    },
    "_generate_ascii_tree": {
      "complexity": 12,
      "lines": 38
    },
    "add_directory": {
      "complexity": 12,
      "lines": 34
    },
    "_get_score_class": {
      "complexity": 5,
      "lines": 10
    },
    "generate_llm_analysis": {
      "complexity": 27,
      "lines": 124
    },
    "generate_llm_insights_html": {
      "complexity": 7,
      "lines": 53
    },
    "generate_recommendations_html": {
      "complexity": 3,
      "lines": 18
    },
    "generate_actions_html": {
      "complexity": 3,
      "lines": 22
    },
    "generate_critical_issues_html": {
      "complexity": 4,
      "lines": 22
    },
    "get_risk_percentage": {
      "complexity": 2,
      "lines": 6
    },
    "generate_fallback_html": {
      "complexity": 3,
      "lines": 30
    },
    "generate_project_types_html": {
      "complexity": 3,
      "lines": 15
    },
    "generate_size_distribution_html": {
      "complexity": 3,
      "lines": 15
    },
    "generate_diversity_metrics_html": {
      "complexity": 3,
      "lines": 23
    },
    "generate_coordination_html": {
      "complexity": 5,
      "lines": 31
    },
    "generate_patterns_html": {
      "complexity": 4,
      "lines": 18
    },
    "generate_llm_insights_compact_html": {
      "complexity": 7,
      "lines": 34
    },
    "run_advanced_analysis": {
      "complexity": 3,
      "lines": 27
    },
    "analyze_temporal_evolution": {
      "complexity": 17,
      "lines": 143
    },
    "detect_duplicates": {
      "complexity": 24,
      "lines": 110
    },
    "analyze_naming_patterns": {
      "complexity": 22,
      "lines": 68
    },
    "classify_directory_purposes": {
      "complexity": 17,
      "lines": 97
    },
    "discover_emergent_purpose_layer3": {
      "complexity": 18,
      "lines": 200
    },
    "find_consolidation_opportunities": {
      "complexity": 14,
      "lines": 65
    },
    "detect_empty_directories": {
      "complexity": 6,
      "lines": 24
    },
    "detect_technology_stack": {
      "complexity": 12,
      "lines": 68
    },
    "enrich_action_plan_with_llm": {
      "complexity": 16,
      "lines": 102
    },
    "analyze_with_gpt5": {
      "complexity": 25,
      "lines": 200
    },
    "generate_agent_remediation_instructions": {
      "complexity": 25,
      "lines": 200
    },
    "generate_architecture_map": {
      "complexity": 22,
      "lines": 96
    },
    "main": {
      "complexity": 7,
      "lines": 57
    }
  },
  "categories": {
    "Creation": [
      "create_separator_line",
      "create_box_header",
      "create_closed_box",
      "create_section_box",
      "create_zone_marker",
      "_create_main_core_diagram",
      "_create_critical_paths_diagram",
      "_create_component_clusters_diagram",
      "_create_service_layers_diagram",
      "_create_risk_analysis_diagram"
    ],
    "Other": [
      "to_oklch_string",
      "pad_to_width",
      "t",
      "start_memory_monitor",
      "monitor",
      "execute_plan_b_fallback",
      "discover_emergent_purpose_layer1",
      "run_analysis",
      "perform_optimized_surface_scan",
      "scan_project_optimized",
      "aggregate_project_stats",
      "execute_adaptive_analysis",
      "perform_deep_analysis",
      "perform_standard_analysis",
      "perform_ecosystem_analysis",
      "perform_plan_b_analysis",
      "perform_emergency_analysis",
      "execute_emergency_fallback",
      "detect_patterns",
      "assess_project_complexity",
      "assess_project_risks",
      "classify_project_type",
      "assess_ecosystem_coordination",
      "detect_ecosystem_patterns",
      "assess_overall_complexity",
      "assess_overall_maturity",
      "assess_overall_risk",
      "identify_critical_risks",
      "estimate_fix_effort",
      "identify_optimization_opportunities",
      "assess_overall_quality",
      "explain_confidence_level",
      "add_directory",
      "run_analysis",
      "run_advanced_analysis",
      "detect_duplicates",
      "classify_directory_purposes",
      "discover_emergent_purpose_layer3",
      "find_consolidation_opportunities",
      "detect_empty_directories",
      "detect_technology_stack",
      "enrich_action_plan_with_llm",
      "main"
    ],
    "Initialization": [
      "__init__",
      "_init_color_schemas",
      "_init_component_colors",
      "__post_init__",
      "__init__",
      "_initialize_enhanced_components",
      "__init__",
      "__init__",
      "__init__",
      "__init__"
    ],
    "Getters": [
      "get_color",
      "_get_calendar_template",
      "_get_calendar_styles",
      "_get_calendar_javascript",
      "_get_timeline_template",
      "_get_timeline_styles",
      "_get_timeline_javascript",
      "_get_language_toggle_template",
      "_get_language_toggle_styles",
      "_get_language_toggle_javascript",
      "_get_theme_toggle_template",
      "_get_theme_toggle_styles",
      "_get_theme_toggle_javascript",
      "_get_settings_panel_template",
      "_get_settings_panel_styles",
      "_get_settings_panel_javascript",
      "get_zone_report",
      "get_display_width",
      "get_translations",
      "get_grade_from_score",
      "get_status_from_score",
      "_get_core_nodes",
      "_get_clean_purpose",
      "_get_relatable_time_label",
      "_get_score_class",
      "get_risk_percentage",
      "get_grade_from_score",
      "get_status_from_score"
    ],
    "Setters": [
      "set_schema"
    ],
    "HTML Generation": [
      "generate_css_variables",
      "generate_enhanced_html",
      "_generate_enhanced_global_styles",
      "_generate_enhanced_javascript",
      "_generate_enhanced_header",
      "_generate_original_content",
      "_generate_enhanced_footer",
      "generate_ascii_section_map",
      "generate_dependency_analysis",
      "generate_html_report",
      "_generate_dependency_map_html",
      "_generate_mermaid_diagram",
      "_generate_ripple_html",
      "_generate_strategic_recommendations",
      "_generate_entity_details_html",
      "generate_smart_diagrams",
      "_generate_mermaid_syntax",
      "_generate_fallback_diagram",
      "generate_maximum_insights",
      "generate_risk_mitigation_strategies",
      "generate_strategic_recommendations",
      "generate_immediate_actions",
      "generate_critical_insights",
      "generate_html_report",
      "_generate_fallback_html",
      "_generate_temporal_html",
      "_generate_work_sessions_html",
      "_generate_tech_stack_html",
      "_generate_duplicates_html",
      "_generate_directory_purposes_html",
      "_generate_consolidation_html",
      "_generate_empty_dirs_html",
      "_generate_naming_html",
      "_generate_llm_insights_html",
      "_generate_color_system_dashboard_html",
      "_generate_color_system_dashboard_html_compact",
      "_generate_file_types_html",
      "_generate_strong_points_html",
      "_generate_weak_points_html",
      "_generate_robustness_html",
      "_generate_action_plan_html",
      "_generate_action_plan_html_optimized",
      "_generate_duplicates_html_optimized",
      "_generate_directory_purposes_html_optimized",
      "_generate_tech_stack_html_optimized",
      "_generate_empty_dirs_html_optimized",
      "_generate_temporal_html_optimized",
      "_generate_consolidation_html_optimized",
      "_generate_performance_html",
      "_generate_work_sessions_html_optimized",
      "_generate_ascii_tree",
      "generate_llm_analysis",
      "generate_llm_insights_html",
      "generate_recommendations_html",
      "generate_actions_html",
      "generate_critical_issues_html",
      "generate_fallback_html",
      "generate_project_types_html",
      "generate_size_distribution_html",
      "generate_diversity_metrics_html",
      "generate_coordination_html",
      "generate_patterns_html",
      "generate_llm_insights_compact_html",
      "generate_agent_remediation_instructions",
      "generate_architecture_map"
    ],
    "Rendering": [
      "render_component"
    ],
    "Analysis": [
      "analyze_and_heal",
      "analyze_and_heal",
      "_analyze_file_dependencies",
      "_analyze_python_dependencies",
      "_analyze_javascript_dependencies",
      "_analyze_generic_dependencies",
      "analyze_code_quality",
      "analyze_temporal_evolution",
      "analyze_naming_patterns",
      "analyze_with_gpt5"
    ],
    "Private/Helper": [
      "_detect_zones",
      "_enforce_width_limits",
      "_scan_source_files",
      "_identify_critical_files",
      "_assess_real_risk",
      "_classify_dependency",
      "_assess_strength",
      "_find_indirect_dependencies",
      "_count_total_lines",
      "_sniper_entity_scan",
      "_find_hub_nodes",
      "_group_by_file_type",
      "_categorize_by_layer",
      "_identify_high_risk_nodes",
      "_filter_relationships",
      "_translate_file_type"
    ],
    "Updates": [
      "_update_zone_metadata",
      "_update_ascii_section_map"
    ],
    "Validation": [
      "_validate_ascii_art"
    ],
    "Checking": [
      "check_time_limit"
    ],
    "Predicates": [
      "determine_analysis_strategy",
      "assess_analysis_effectiveness",
      "identify_analysis_limitations"
    ],
    "Extraction": [
      "perform_maximum_extraction_analysis",
      "_extract_class_methods",
      "_extract_component_props",
      "assess_data_extraction_quality"
    ],
    "Building": [
      "_build_enhanced_dependency_data",
      "_build_dependency_graph"
    ],
    "Calculations": [
      "_calculate_ripple_effects",
      "_calculate_function_complexity",
      "_calculate_risk",
      "calculate_project_health",
      "calculate_shannon_diversity",
      "calculate_sampling_efficiency",
      "calculate_performance_metrics",
      "calculate_critical_score"
    ],
    "Parsing": [
      "_parse_markdown_to_html"
    ]
  },
  "html_components": {
    "SVG Charts": 0,
    "Canvas Elements": 0,
    "Interactive Buttons": 39,
    "Form Elements": 2,
    "Tables": 14,
    "Lists": 48,
    "Divs": 503,
    "Spans": 131,
    "Links": 0,
    "Images": 0,
    "Scripts": 6,
    "Styles": 5
  },
  "color_schemas": [],
  "dependencies": [
    "collections",
    "hashlib",
    "typing",
    "threading",
    "pathlib",
    "logging",
    "psutil",
    "json",
    "datetime",
    "os",
    "time",
    "sys",
    "re",
    "shutil",
    "dataclasses",
    "requests",
    "enum",
    "ast",
    "glob",
    "difflib",
    "calendar",
    "subprocess",
    "concurrent.futures",
    "math",
    "openai"
  ]
}